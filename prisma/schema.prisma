generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User {
  id                     String    @id @default(uuid())
  name                   String
  email                  String    @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
  invalid_login_attempts Int       @default(0)
  lockedAt               DateTime?

  teamMembers TeamMember[]
  accounts    Account[]
  sessions    Session[]
  invitations Invitation[]
  UserChat    UserChat[]
  Message     Message[]
}

model Team {
  id              String       @id @default(uuid())
  name            String
  slug            String       @unique
  domain          String?      @unique
  defaultRole     Role         @default(MEMBER)
  billingId       String?
  billingProvider String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  members         TeamMember[]
  invitations     Invitation[]
  apiKeys         ApiKey[]

  @@index([billingId])
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id             String   @id @default(uuid())
  teamId         String
  email          String?
  role           Role     @default(MEMBER)
  token          String   @unique
  expires        DateTime
  invitedBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  sentViaEmail   Boolean  @default(true)
  allowedDomains String[] @default([])

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model Subscription {
  id         String    @id
  customerId String
  priceId    String
  active     Boolean   @default(false)
  startDate  DateTime
  endDate    DateTime
  cancelAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@index([customerId])
}

model Service {
  id          String   @id @default(uuid())
  description String
  features    String[]
  image       String
  name        String
  created     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Price       Price[]
}

model Price {
  id            String   @id @default(uuid())
  billingScheme String
  currency      String
  serviceId     String
  amount        Int?
  metadata      Json
  type          String
  created       DateTime

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model jackson_store {
  key        String    @id(map: "_jackson_store_key") @db.VarChar(1500)
  value      String
  iv         String?   @db.VarChar(64)
  tag        String?   @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  modifiedAt DateTime? @db.Timestamp(6)
  namespace  String?   @db.VarChar(256)

  jackson_index jackson_index[]

  @@index([namespace], map: "_jackson_store_namespace")
  @@ignore
}

model jackson_index {
  id       Int    @id(map: "_jackson_index_id") @default(autoincrement())
  key      String @db.VarChar(1500)
  storeKey String @db.VarChar(1500)

  store jackson_store @relation(fields: [storeKey], references: [key], onDelete: Cascade, onUpdate: NoAction)

  @@index([key], map: "_jackson_index_key")
  @@index([key, storeKey], map: "_jackson_index_key_store")
  @@ignore
}

model jackson_ttl {
  key       String @id(map: "jackson_ttl_key") @db.VarChar(1500)
  expiresAt BigInt

  @@index([expiresAt], map: "_jackson_ttl_expires_at")
  @@ignore
}

model UserChat {
  id              String   @id @default(uuid())
  name            String
  type            String
  created_user_id String
  receipent_ids   String
  description     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user    User      @relation(fields: [created_user_id], references: [id], onDelete: Cascade)
  Message Message[]

  @@index([created_user_id])
}

model Message {
  id             String      @id @default(uuid())
  user_chat_id   String
  sender_id      String
  description    String
  receipents_ids String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  user_chat      UserChat    @relation(fields: [user_chat_id], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  ChatMedia      ChatMedia[]
  @@index([user_chat_id])
  @@index([sender_id])
}

model ChatMedia {
  id         String   @id @default(uuid())
  name       String
  message_id String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  message    Message  @relation(fields: [message_id], references: [id], onDelete: Cascade)
}

model Chat {
  id               String   @id @default(uuid())
  sender_id         String
  room_id           String
  receiver_id       String
  lastMessage      String
  lastMessageDate  DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  chatHistory      ChatHistory[]
  @@index([sender_id])
  @@index([receiver_id])
}

model ChatHistory{
  id         String   @id @default(uuid())
  sender_id   String
  chat_id     String
  receiver_id String
  message    String
  timestamp  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  chat       Chat    @relation(fields: [chat_id], references: [id], onDelete: Cascade)

  @@index([sender_id])
  @@index([receiver_id])
  @@index([chat_id])
}
model Project {
  id          String   @id @default(uuid())
  user_id     String?
  projectName String   @db.VarChar(255)
  description String?   @db.Text
  startDate   DateTime?
  endDate     DateTime?
  teamId      String?
  status     Boolean?  @default(true)  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
model Task {
  id            String   @id @default(uuid())
  projectId     String?
  name          String
  stage         String?
  priority      String?
  dueDate          DateTime?
  assignee      String?
  assignor      String?
  description   String?
  teamId        String?
  tag           String?
  status     Boolean?  @default(true)  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
model ChatGroup {
  id          String   @id @default(uuid())
  user_id     String?
  groupName String   @db.VarChar(255)
  teamId      String?
  status     Boolean?  @default(true)  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
model LastReadTime {
  id            String   @id @default(uuid())
  userId        String
  teamId        String
  channelId     String
  lastReadTime  DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, teamId, channelId]) 
}

model ChannelUsers {
  id             String      @id @default(uuid())
  userId         String
  channelId      String
  teamId         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
}